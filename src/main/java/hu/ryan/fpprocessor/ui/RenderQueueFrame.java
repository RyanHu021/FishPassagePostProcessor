package hu.ryan.fpprocessor.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.LayoutStyle;
import javax.swing.WindowConstants;
import javax.swing.filechooser.FileNameExtensionFilter;

import org.apache.poi.openxml4j.exceptions.InvalidFormatException;

import hu.ryan.fpprocessor.ProgramLogger;
import hu.ryan.fpprocessor.file.POIWriter;
import hu.ryan.fpprocessor.graphics.RenderItem;
import hu.ryan.fpprocessor.graphics.RenderTask;

public class RenderQueueFrame extends javax.swing.JFrame {

	private static final long serialVersionUID = 1799346235468491788L;
	private List<RenderItem> renderQueue;
	private DefaultListModel<String> listModel;
	private JFileChooser fc;

	/**
	 * Creates new form RenderQueueFrame
	 */
	public RenderQueueFrame(RenderItem... items) {
		initComponents();
		renderQueue = new LinkedList<RenderItem>();
		for (RenderItem item : items) {
			renderQueue.add(item);
			listModel.addElement(item.toString());
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jPanel1 = new JPanel();
		jScrollPane1 = new JScrollPane();
		list = new JList<>();
		jPanel2 = new JPanel();
		btnRemove = new JButton();
		btnRender = new JButton();

		fc = new JFileChooser();

		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("Render Queue");

		jPanel1.setBorder(BorderFactory.createTitledBorder("Render Queue"));

		listModel = new DefaultListModel<String>();
		list.setModel(listModel);
		jScrollPane1.setViewportView(list);

		GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(
				jScrollPane1, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE));

		btnRemove.setText("Remove from Queue");
		btnRemove.addActionListener(new BtnRemoveActionListener());
		jPanel2.add(btnRemove);

		btnRender.setText("Render");
		btnRender.addActionListener(new BtnRenderActionListener());
		jPanel2.add(btnRender);

		GroupLayout layout = new GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup().addContainerGap()
								.addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
										.addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)
										.addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE))
								.addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(jPanel2,
								GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addContainerGap()));

		pack();
	}// </editor-fold>

	// Variables declaration - do not modify
	private JButton btnRemove;
	private JButton btnRender;
	private JPanel jPanel1;
	private JPanel jPanel2;
	private JScrollPane jScrollPane1;
	private JList<String> list;
	// End of variables declaration

	public void add(RenderItem item) {
		renderQueue.add(item);
		listModel.addElement(item.toString());
	}

	private class BtnRemoveActionListener implements ActionListener {
		public void actionPerformed(ActionEvent e) {
			try {
				renderQueue.remove(list.getSelectedIndex());
				listModel.remove(list.getSelectedIndex());
			} catch (IndexOutOfBoundsException e1) {
				ProgramLogger.showInfoDialog(getClass(), jPanel1, "No item selected");
			}
		}
	}

	private class BtnRenderActionListener implements ActionListener {
		public void actionPerformed(ActionEvent e) {
			RenderTask task = new RenderTask();
			try {
				Map<String, File> imgMap = task.render(renderQueue);
				if (!imgMap.isEmpty()) {
					fc.setDialogTitle("Export Condition");
					fc.setSelectedFile(new File(ProcessorFrame.DEFAULT_FC_DIRECTORY + "report.docx"));
					fc.resetChoosableFileFilters();
					fc.setAcceptAllFileFilterUsed(false);
					FileNameExtensionFilter filter = new FileNameExtensionFilter("Microsoft Word Document (.docx)",
							"docx");
					fc.addChoosableFileFilter(filter);

					if (fc.showSaveDialog(jPanel2) == JFileChooser.APPROVE_OPTION) {
						File file = fc.getSelectedFile();
						try {
							POIWriter.writeWordReport(file, imgMap);
							ProgramLogger.log(getClass(), ProgramLogger.INFO,
									"Exported report " + file.getAbsolutePath());
						} catch (IOException | InvalidFormatException e1) {
							ProgramLogger.log(getClass(), ProgramLogger.INFO,
									"Could not export report " + file.getAbsolutePath());
						}
					}
				}
			} catch (IOException e1) {
				ProgramLogger.showInfoDialog(getClass(), jPanel1, "Could not render queue");
			}
		}
	}
}
